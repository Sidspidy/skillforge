// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String?
  refreshToken String?
  createdAt    DateTime @default(now())

  skills      Skill[]
  categories  SkillCategory[]
  weekPlans   WeekPlan[]
  goals       Goal[]
  reflections Reflection[]
}

model SkillCategory {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  skills Skill[]

  @@unique([name, userId]) // unique name per user
}

model Skill {
  id        String     @id @default(uuid())
  name      String
  level     SkillLevel
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   SkillCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  goals Goal[]

  @@unique([name, userId]) // optional: unique skill name per user
}

model WeekPlan {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  goals      Goal[]
  reflection Reflection?
}

model Goal {
  id        String     @id @default(uuid())
  title     String
  status    GoalStatus @default(PENDING)
  notes     String?
  createdAt DateTime   @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  weekPlan   WeekPlan @relation(fields: [weekPlanId], references: [id], onDelete: Cascade)
  weekPlanId String

  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId String
}

model Reflection {
  id         String   @id @default(uuid())
  summary    String
  challenges String
  wins       String
  ideas      String
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  weekPlan   WeekPlan @relation(fields: [weekPlanId], references: [id], onDelete: Cascade)
  weekPlanId String   @unique
}

enum GoalStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
